// @ts-nocheck
import React from 'react';
import { dynamic } from 'dumi';

export default {
  'Button-demo': {
    component: function DumiDemo() {
  var _interopRequireDefault = require("D:/self_git/vite-react-boty-desing/node_modules/@umijs/babel-preset-umi/node_modules/@babel/runtime/helpers/interopRequireDefault");

  var _react = _interopRequireDefault(require("react"));

  var _Button = _interopRequireDefault(require("D:/self_git/vite-react-boty-desing/src/components/Button"));

  var _default = function _default() {
    return /*#__PURE__*/_react["default"].createElement(_Button["default"], null, "\u6309\u94AE");
  };

  return _react["default"].createElement(_default);
},
    previewerProps: {"sources":{"_":{"jsx":"import React from 'react';\nimport Button from \"../../src/components/Button\";\nexport default () => <Button>按钮</Button>\n"},"src/components/Button/index.tsx":{"import":"../../src/components/Button","content":"/*\r\n * @Author: Cookie\r\n * @Date: 2021-02-27 16:14:15\r\n * @LastEditors: Cookie\r\n * @LastEditTime: 2021-03-03 14:28:03\r\n * @Description:\r\n */\r\n\r\nimport React, { useState } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport {\r\n  LoadingOutlined,\r\n} from '@ant-design/icons';\r\nimport { tuple } from \"../utils/types\";\r\nimport { getPrefixCls } from '../config/provider'\r\n\r\nimport \"./index.less\";\r\n\r\nconst ButtonTypes = tuple(\"default\", \"primary\", \"ghost\", \"dashed\", \"link\", \"text\");\r\nexport type ButtonType = typeof ButtonTypes[number];\r\n\r\nconst ButtonShapes = tuple(\"circle\", \"round\");\r\nexport type ButtonShape = typeof ButtonShapes[number];\r\n\r\nconst ButtonHTMLTypes = tuple(\"submit\", \"button\", \"reset\");\r\nexport type ButtonHTMLType = typeof ButtonHTMLTypes[number];\r\n\r\nexport type SizeType = \"small\" | \"middle\" | \"large\" | undefined;\r\n\r\ninterface BaseProps {\r\n  /**\r\n   * @description 自定义样式名\r\n   */\r\n  className?: string;\r\n  /**\r\n   * @description 自定义样式\r\n   */\r\n  style?: React.HTMLProps<HTMLStyleElement>;\r\n}\r\n\r\ninterface BaseButtonProps {\r\n  /**\r\n   * @description 按钮类型\r\n   */\r\n  type?: ButtonType;\r\n  /**\r\n   * @description 图标组件\r\n   */\r\n  icon?: React.ReactNode;\r\n  /**\r\n   * @description 形状\r\n   */\r\n  shape?: ButtonShape;\r\n  /**\r\n   * @description 大小\r\n   */\r\n  size?: SizeType;\r\n  /**\r\n   * @description loading状态，设置之后会执行异步方法\r\n   */\r\n  loading?: boolean;\r\n  /**\r\n   * @description 样式前缀\r\n   */\r\n  prefixCls?: string;\r\n  /**\r\n   * @description 危险类型\r\n   */\r\n  danger?: boolean;\r\n  /**\r\n   * @description 按钮原生类型\r\n   */\r\n  htmlType?: ButtonHTMLType;\r\n  children?: React.ReactNode;\r\n}\r\n\r\ninterface INativeButtonProps {\r\n  /**\r\n   * @description 是否生效\r\n   */\r\n  disabled?: boolean;\r\n  /**\r\n   * @description 点击方法\r\n   */\r\n  onClick?: React.MouseEventHandler<HTMLElement>;\r\n}\r\n\r\nexport type IButtonProps = BaseProps & BaseButtonProps & INativeButtonProps;\r\n\r\ntype Loading = number | boolean;\r\n\r\nconst Button = (props: IButtonProps) => {\r\n  const {\r\n    htmlType = \"button\" as IButtonProps[\"htmlType\"],\r\n    prefixCls,\r\n    type,\r\n    shape,\r\n    size: customizeSize,\r\n    className,\r\n    children,\r\n    loading,\r\n    style: customStyle,\r\n    icon\r\n  } = props;\r\n\r\n  const [innerLoading, setLoading] = useState<Loading>(false);\r\n\r\n  let sizeCls = \"\";\r\n\r\n  switch (customizeSize) {\r\n    case \"large\":\r\n      sizeCls = \"lg\";\r\n      break;\r\n    case \"small\":\r\n      sizeCls = \"sm\";\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  const handleClick = async (e: React.MouseEvent<HTMLButtonElement | HTMLAnchorElement, MouseEvent>) => {\r\n    const { onClick } = props;\r\n    if (innerLoading) return;\r\n    if (loading) {\r\n      setLoading(true);\r\n      await onClick?.(e);\r\n      setLoading(false);\r\n    } else {\r\n      onClick?.(e);\r\n    }\r\n  };\r\n\r\n  const selfPrefixCls = getPrefixCls(prefixCls || 'btn')\r\n\r\n  const iconType = innerLoading ? 'loading' : icon;\r\n\r\n  const classes = classNames(\r\n    selfPrefixCls,\r\n    {\r\n      [`${selfPrefixCls}-${type}`]: type,\r\n      [`${selfPrefixCls}-${shape}`]: shape,\r\n      [`${selfPrefixCls}-${sizeCls}`]: sizeCls,\r\n      [`${selfPrefixCls}-icon-only`]: !children && children !== 0 && iconType,\r\n    },\r\n    className\r\n  );\r\n\r\n  const iconPrefixCls = getPrefixCls('btn-icon')\r\n  const iconClasses = classNames(\r\n    iconPrefixCls,\r\n    {\r\n      [`${iconPrefixCls}-${sizeCls}`]: sizeCls,\r\n    },\r\n    className\r\n  );\r\n\r\n  const LoadingNode = () => {\r\n    if (icon) return icon\r\n    return (\r\n      innerLoading &&\r\n      <LoadingOutlined className={iconClasses} />\r\n    )\r\n  }\r\n\r\n  const childrenNode = children || null;\r\n\r\n  return (\r\n    <button type={htmlType} className={classes} onClick={handleClick} style={customStyle}>\r\n      {LoadingNode()}\r\n      {childrenNode}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n"},"utils/types.ts":{"import":"../utils/types","content":"/*\r\n * @Author: Cookie\r\n * @Date: 2021-02-27 16:57:17\r\n * @LastEditors: Cookie\r\n * @LastEditTime: 2021-02-27 17:04:30\r\n * @Description:\r\n */\r\n\r\nexport const tuple = <T extends string[]>(...args: T) => args;\r\n\r\nexport const tupleNum = <T extends number[]>(...args: T) => args;"},"config/provider.ts":{"import":"../config/provider","content":"/*\r\n * @Author: Cookie\r\n * @Date: 2021-03-03 12:00:19\r\n * @LastEditors: Cookie\r\n * @LastEditTime: 2021-03-03 12:02:03\r\n * @Description: \r\n */\r\n\r\n\r\nexport const getPrefixCls = (prefixCls: string) => {\r\n  return prefixCls ? `boty-${prefixCls}` : 'boty'\r\n}"},"index.less":{"import":"./index.less","content":".boty-btn {\r\n  min-width: 88px;\r\n  height: 32px;\r\n  padding: 4px 15px;\r\n  font-size: 14px;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  border: 1px solid #d9d9d9;\r\n  box-shadow: 0 2px 0 rgb(0 0 0 / 2%);\r\n  display: inline-block;\r\n  font-weight: 400;\r\n  white-space: nowrap;\r\n  user-select: none;\r\n  background: #fff;\r\n  border-radius: 2px;\r\n  touch-action: manipulation;\r\n  outline: none;\r\n  position: relative;\r\n  box-sizing: border-box;\r\n  margin: 0 5px;\r\n\r\n\r\n  .boty-btn-icon {\r\n    font-size: 14px;\r\n\r\n    &.boty-btn-icon-lg {\r\n      font-size: 16px;\r\n    }\r\n\r\n    &.boty-btn-icon-sm {\r\n      font-size: 14px;\r\n    }\r\n  }\r\n\r\n  &.boty-btn-icon-only {\r\n    height: 32px;\r\n    width: 32px;\r\n    padding: 2.4px 0;\r\n    font-size: 16px;\r\n  }\r\n\r\n  &.boty-btn-lg {\r\n    height: 40px;\r\n    padding: 6.4px 15px;\r\n    font-size: 16px;\r\n  }\r\n\r\n  &.boty-btn-sm {\r\n    height: 24px;\r\n    padding: 0 7px;\r\n    font-size: 14px;\r\n  }\r\n\r\n  &.boty-btn-circle {\r\n    min-width: 32px;\r\n    width: 32px;\r\n    height: 32px;\r\n    border-radius: 50%;\r\n  }\r\n\r\n  &.boty-btn-round {\r\n    border-radius: 40px;\r\n  }\r\n}"}},"dependencies":{"react":{"version":"16.x"},"classnames":{"version":"2.2.6"},"@ant-design/icons":{"version":"4.0.0"}},"title":"普通配置","description":"<div class=\"markdown\"><p>参考 antd</p></div>","identifier":"Button-demo"},
  },
  'Button-demo-1': {
    component: function DumiDemo() {
  var _interopRequireDefault = require("D:/self_git/vite-react-boty-desing/node_modules/@umijs/babel-preset-umi/node_modules/@babel/runtime/helpers/interopRequireDefault");

  var _react = _interopRequireDefault(require("react"));

  var _Button = _interopRequireDefault(require("D:/self_git/vite-react-boty-desing/src/components/Button"));

  var handlerSyncClick = function handlerSyncClick() {
    return new Promise(function (resolve) {
      setTimeout(function () {
        alert('回调结束');
        resolve(true);
      }, 1000);
    });
  };

  var _default = function _default() {
    return /*#__PURE__*/_react["default"].createElement(_Button["default"], {
      onClick: handlerSyncClick,
      loading: true
    }, "\u5F02\u6B65\u56DE\u8C03");
  };

  return _react["default"].createElement(_default);
},
    previewerProps: {"sources":{"_":{"jsx":"import React from 'react';\nimport Button from \"../../src/components/Button\";\nconst handlerSyncClick = () => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        alert('回调结束')\n        resolve(true);\n      }, 1000);\n    });\n  };\nexport default () => <Button onClick={handlerSyncClick} loading>异步回调</Button>\n"},"src/components/Button/index.tsx":{"import":"../../src/components/Button","content":"/*\r\n * @Author: Cookie\r\n * @Date: 2021-02-27 16:14:15\r\n * @LastEditors: Cookie\r\n * @LastEditTime: 2021-03-03 14:28:03\r\n * @Description:\r\n */\r\n\r\nimport React, { useState } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport {\r\n  LoadingOutlined,\r\n} from '@ant-design/icons';\r\nimport { tuple } from \"../utils/types\";\r\nimport { getPrefixCls } from '../config/provider'\r\n\r\nimport \"./index.less\";\r\n\r\nconst ButtonTypes = tuple(\"default\", \"primary\", \"ghost\", \"dashed\", \"link\", \"text\");\r\nexport type ButtonType = typeof ButtonTypes[number];\r\n\r\nconst ButtonShapes = tuple(\"circle\", \"round\");\r\nexport type ButtonShape = typeof ButtonShapes[number];\r\n\r\nconst ButtonHTMLTypes = tuple(\"submit\", \"button\", \"reset\");\r\nexport type ButtonHTMLType = typeof ButtonHTMLTypes[number];\r\n\r\nexport type SizeType = \"small\" | \"middle\" | \"large\" | undefined;\r\n\r\ninterface BaseProps {\r\n  /**\r\n   * @description 自定义样式名\r\n   */\r\n  className?: string;\r\n  /**\r\n   * @description 自定义样式\r\n   */\r\n  style?: React.HTMLProps<HTMLStyleElement>;\r\n}\r\n\r\ninterface BaseButtonProps {\r\n  /**\r\n   * @description 按钮类型\r\n   */\r\n  type?: ButtonType;\r\n  /**\r\n   * @description 图标组件\r\n   */\r\n  icon?: React.ReactNode;\r\n  /**\r\n   * @description 形状\r\n   */\r\n  shape?: ButtonShape;\r\n  /**\r\n   * @description 大小\r\n   */\r\n  size?: SizeType;\r\n  /**\r\n   * @description loading状态，设置之后会执行异步方法\r\n   */\r\n  loading?: boolean;\r\n  /**\r\n   * @description 样式前缀\r\n   */\r\n  prefixCls?: string;\r\n  /**\r\n   * @description 危险类型\r\n   */\r\n  danger?: boolean;\r\n  /**\r\n   * @description 按钮原生类型\r\n   */\r\n  htmlType?: ButtonHTMLType;\r\n  children?: React.ReactNode;\r\n}\r\n\r\ninterface INativeButtonProps {\r\n  /**\r\n   * @description 是否生效\r\n   */\r\n  disabled?: boolean;\r\n  /**\r\n   * @description 点击方法\r\n   */\r\n  onClick?: React.MouseEventHandler<HTMLElement>;\r\n}\r\n\r\nexport type IButtonProps = BaseProps & BaseButtonProps & INativeButtonProps;\r\n\r\ntype Loading = number | boolean;\r\n\r\nconst Button = (props: IButtonProps) => {\r\n  const {\r\n    htmlType = \"button\" as IButtonProps[\"htmlType\"],\r\n    prefixCls,\r\n    type,\r\n    shape,\r\n    size: customizeSize,\r\n    className,\r\n    children,\r\n    loading,\r\n    style: customStyle,\r\n    icon\r\n  } = props;\r\n\r\n  const [innerLoading, setLoading] = useState<Loading>(false);\r\n\r\n  let sizeCls = \"\";\r\n\r\n  switch (customizeSize) {\r\n    case \"large\":\r\n      sizeCls = \"lg\";\r\n      break;\r\n    case \"small\":\r\n      sizeCls = \"sm\";\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  const handleClick = async (e: React.MouseEvent<HTMLButtonElement | HTMLAnchorElement, MouseEvent>) => {\r\n    const { onClick } = props;\r\n    if (innerLoading) return;\r\n    if (loading) {\r\n      setLoading(true);\r\n      await onClick?.(e);\r\n      setLoading(false);\r\n    } else {\r\n      onClick?.(e);\r\n    }\r\n  };\r\n\r\n  const selfPrefixCls = getPrefixCls(prefixCls || 'btn')\r\n\r\n  const iconType = innerLoading ? 'loading' : icon;\r\n\r\n  const classes = classNames(\r\n    selfPrefixCls,\r\n    {\r\n      [`${selfPrefixCls}-${type}`]: type,\r\n      [`${selfPrefixCls}-${shape}`]: shape,\r\n      [`${selfPrefixCls}-${sizeCls}`]: sizeCls,\r\n      [`${selfPrefixCls}-icon-only`]: !children && children !== 0 && iconType,\r\n    },\r\n    className\r\n  );\r\n\r\n  const iconPrefixCls = getPrefixCls('btn-icon')\r\n  const iconClasses = classNames(\r\n    iconPrefixCls,\r\n    {\r\n      [`${iconPrefixCls}-${sizeCls}`]: sizeCls,\r\n    },\r\n    className\r\n  );\r\n\r\n  const LoadingNode = () => {\r\n    if (icon) return icon\r\n    return (\r\n      innerLoading &&\r\n      <LoadingOutlined className={iconClasses} />\r\n    )\r\n  }\r\n\r\n  const childrenNode = children || null;\r\n\r\n  return (\r\n    <button type={htmlType} className={classes} onClick={handleClick} style={customStyle}>\r\n      {LoadingNode()}\r\n      {childrenNode}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n"},"utils/types.ts":{"import":"../utils/types","content":"/*\r\n * @Author: Cookie\r\n * @Date: 2021-02-27 16:57:17\r\n * @LastEditors: Cookie\r\n * @LastEditTime: 2021-02-27 17:04:30\r\n * @Description:\r\n */\r\n\r\nexport const tuple = <T extends string[]>(...args: T) => args;\r\n\r\nexport const tupleNum = <T extends number[]>(...args: T) => args;"},"config/provider.ts":{"import":"../config/provider","content":"/*\r\n * @Author: Cookie\r\n * @Date: 2021-03-03 12:00:19\r\n * @LastEditors: Cookie\r\n * @LastEditTime: 2021-03-03 12:02:03\r\n * @Description: \r\n */\r\n\r\n\r\nexport const getPrefixCls = (prefixCls: string) => {\r\n  return prefixCls ? `boty-${prefixCls}` : 'boty'\r\n}"},"index.less":{"import":"./index.less","content":".boty-btn {\r\n  min-width: 88px;\r\n  height: 32px;\r\n  padding: 4px 15px;\r\n  font-size: 14px;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  border: 1px solid #d9d9d9;\r\n  box-shadow: 0 2px 0 rgb(0 0 0 / 2%);\r\n  display: inline-block;\r\n  font-weight: 400;\r\n  white-space: nowrap;\r\n  user-select: none;\r\n  background: #fff;\r\n  border-radius: 2px;\r\n  touch-action: manipulation;\r\n  outline: none;\r\n  position: relative;\r\n  box-sizing: border-box;\r\n  margin: 0 5px;\r\n\r\n\r\n  .boty-btn-icon {\r\n    font-size: 14px;\r\n\r\n    &.boty-btn-icon-lg {\r\n      font-size: 16px;\r\n    }\r\n\r\n    &.boty-btn-icon-sm {\r\n      font-size: 14px;\r\n    }\r\n  }\r\n\r\n  &.boty-btn-icon-only {\r\n    height: 32px;\r\n    width: 32px;\r\n    padding: 2.4px 0;\r\n    font-size: 16px;\r\n  }\r\n\r\n  &.boty-btn-lg {\r\n    height: 40px;\r\n    padding: 6.4px 15px;\r\n    font-size: 16px;\r\n  }\r\n\r\n  &.boty-btn-sm {\r\n    height: 24px;\r\n    padding: 0 7px;\r\n    font-size: 14px;\r\n  }\r\n\r\n  &.boty-btn-circle {\r\n    min-width: 32px;\r\n    width: 32px;\r\n    height: 32px;\r\n    border-radius: 50%;\r\n  }\r\n\r\n  &.boty-btn-round {\r\n    border-radius: 40px;\r\n  }\r\n}"}},"dependencies":{"react":{"version":"16.x"},"classnames":{"version":"2.2.6"},"@ant-design/icons":{"version":"4.0.0"}},"title":"loading","description":"<div class=\"markdown\"><p>单loading属性存在时，会将点击方法视为异步，用 await 承接</p></div>","identifier":"Button-demo-1"},
  },
};
